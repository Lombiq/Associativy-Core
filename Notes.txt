-	Logical and physical location (namespace and directory structure) of a type not always match!
-	For an Associativy module to work, it should...
	-	Define an INodeToNodeConnector implementation
	-	Define an implementation of IGraphProvider
	-	Implement the appropriate migrations to set up node types and connector records; nodes should have CommonPart attached
	-	*Optionally* define routes to frontend engine controllers. This could be simply done by inheriting from RoutesBase and setting ModuleName
	-	*Optionally* add AssociativyNodeLabelPart to node content types, if the nodes should be searchable by label. The default implementation uses the Title as the label, so if this is not appropriate for you content type, you should write your own handler event for AssociativyNodeLabelPart.
	The above are not necessary if a module just wants to use Associativy services with an existing graphProvider.
-	A content type can be listed in multiple graphProviders, thus a content item can be part of multiple graphs.
-	Frontend engine main controllers should be named with the [EngineName]EngineController convention.
-	Frontend engine configuration can be changed by implementing the engine's setup interface (e.g. IGraphvizSetup).
-	Associativy services are thread-safe.
-	By convention modules using Associativy are named Associativy.Instances.ModuleName, but this is not mandatory.
-	Since frontend engine page parts are added dynamically (not with migrations) they don't require a Driver.
-	All frontend engine page types should include EngineCommonPart.
-	Further good visualization libraries: http://jsplumb.org, http://code.google.com/p/canviz/
-	For frontend engines to be properly contexted routes to them should include either a GraphName token or a GraphContext data token.
-	Templates can be overridden like this: /Themes/MyTheme/Views/MyModule/MyController/Path/To/MyTemplate.cshtml
-	The default admin user has no roles, take this so to use frontend engine authorization administration, add a role to it. By default graphs aren't shown to anyone.

Page content type conventions:
- Page parts should be prefixed when necessary to avoid name clashing with other content parts
- Shapes are to be named Page_PagePartName
- Model, drivers, templates, etc. should be placed into a subdirectory: Pages/ControllerName/PagePartName.cshtml Here part name prefixes can be ommited.

Search().Parse(searchFields, query, false); kell a partial match-hez, wildcarddal (kere*), a false tiltja az escape-elést
 * Példa: Modules\Orchard.Search\Services\SearchService.cs