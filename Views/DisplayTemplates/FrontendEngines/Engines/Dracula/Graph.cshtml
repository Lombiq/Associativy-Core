@using Orchard.ContentManagement
@using System.Dynamic;
@model QuickGraph.IUndirectedGraph<IContent, QuickGraph.IUndirectedEdge<IContent>>
           
@{
    Script.Require("Dracula").AtHead();

    // Although this templating add flexibility, it's very slow (page load time goes up to 1 second with whole graph).
    Func<IContent, dynamic> addNodeShape =
        (node) =>
        {
            return ((dynamic)ShapeFactory).DisplayTemplate(
                        TemplateName: "FrontendEngines/Engines/Dracula/AddNode",
                        Model: node,
                        Prefix: null);
        };

    Func<int, int, dynamic> addEdgeShape =
    (sourceId, targetId) =>
    {
        dynamic model = new ExpandoObject();
        model.SourceId = sourceId;
        model.TargetId = targetId;
        
        return ((dynamic)ShapeFactory).DisplayTemplate(
                    TemplateName: "FrontendEngines/Engines/Dracula/AddEdge",
                    Model: model,
                    Prefix: null);
    };
}

<script type="text/javascript">
$(document).ready(function(){
	var graph = new Graph();

    @foreach (var node in Model.Vertices)
    {
        @Display(addNodeShape(node));
    }

    @foreach (var edge in Model.Edges)
    {
        @Display(addEdgeShape(edge.Source.Id, edge.Target.Id));
    }
	
	var layouter = new Graph.Layout.Spring(graph);
	layouter.layout();
	 
	var renderer = new Graph.Renderer.Raphael("canvas", graph, 900, 1000);
	renderer.draw();
});
</script>
<div id="canvas">
</div>